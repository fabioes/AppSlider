// <auto-generated />
using System;
using AppSlider.Infrastructure.DataAccess;
using AppSlider.Infrastructure.EntityFrameworkDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppSlider.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20190819054317_ChangeLogo")]
    partial class ChangeLogo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppSlider.Domain.Entities.Business.BusinessEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<long?>("CNPJ");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(300);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200);

                    b.Property<string>("ContactName")
                        .HasMaxLength(200);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<byte[]>("File");

                    b.Property<int?>("IdCategory");

                    b.Property<Guid?>("IdFather");

                    b.Property<Guid?>("IdLogo");

                    b.Property<int>("IdType");

                    b.Property<string>("LegalName")
                        .HasColumnName("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdFather");

                    b.HasIndex("IdLogo");

                    b.HasIndex("IdType");

                    b.ToTable("Business");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d0f6160-0d48-42fb-b935-3778b91c4549"),
                            Active = true,
                            Blocked = true,
                            CNPJ = 0L,
                            ContactAddress = "",
                            ContactEmail = "",
                            ContactName = "",
                            ContactPhone = "",
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 702, DateTimeKind.Local).AddTicks(5893),
                            Description = "Franquia padrão 'MidiaFone'",
                            IdCategory = 1,
                            IdType = 1,
                            LegalName = "MidiaFone"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Business.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("BusinessTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Blocked = true,
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 746, DateTimeKind.Local).AddTicks(7950),
                            Description = "Franquia como Tipo de Negócio.",
                            Name = "Franquia"
                        },
                        new
                        {
                            Id = 2,
                            Blocked = true,
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 746, DateTimeKind.Local).AddTicks(8893),
                            Description = "Estabelecimento como Tipo de Negócio.",
                            Name = "Estabelecimento"
                        },
                        new
                        {
                            Id = 3,
                            Blocked = true,
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 746, DateTimeKind.Local).AddTicks(8977),
                            Description = "Anunciante como Tipo de Negócio.",
                            Name = "Anunciante"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.BusinessPlayLists.BusinessPlayList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCreated");

                    b.Property<Guid>("IdBusiness");

                    b.Property<Guid>("IdPlayList");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.HasIndex("IdPlayList");

                    b.ToTable("BusinessPlaylists");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Blocked = true,
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 761, DateTimeKind.Local).AddTicks(7925),
                            Description = "Categoria MidiaFone.",
                            Name = "MidiaFone"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Equipaments.Equipament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("IdEstablishment");

                    b.Property<Guid>("IdFranchise");

                    b.Property<Guid?>("IdPlaylist");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IdEstablishment");

                    b.HasIndex("IdFranchise");

                    b.HasIndex("IdPlaylist");

                    b.HasIndex("MacAddress");

                    b.ToTable("Equipaments");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("MineType");

                    b.Property<string>("Name");

                    b.Property<long>("Size");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.PlayLists.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<bool>("Blocked");

                    b.Property<Guid>("BusinessId");

                    b.Property<DateTime>("DataCreated");

                    b.Property<DateTime>("Expirate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Playlists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0e9c45b-697c-4b1f-864e-2547cab52ff6"),
                            Active = true,
                            Blocked = true,
                            BusinessId = new Guid("9d0f6160-0d48-42fb-b935-3778b91c4549"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 767, DateTimeKind.Local).AddTicks(7790),
                            Expirate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Name = "Curiosidades MidiaFone"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.PlayLists.PlaylistFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCreated");

                    b.Property<short>("Duration");

                    b.Property<Guid>("IdFile");

                    b.Property<Guid>("IdPlayList");

                    b.Property<int>("PlaylistFileType");

                    b.HasKey("Id");

                    b.HasIndex("IdFile");

                    b.HasIndex("IdPlayList");

                    b.ToTable("PlaylistFiles");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba22d7e3-7f28-427b-9345-80bdee7526af"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(14),
                            Description = "Permissão de leitura para rotina de Usuário.",
                            Name = "AppSlider.Read.User"
                        },
                        new
                        {
                            Id = new Guid("d4a6d583-fa33-4dbf-bc25-f9a91de11737"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(135),
                            Description = "Permissão de escrita para rotina de Usuário.",
                            Name = "AppSlider.Write.User"
                        },
                        new
                        {
                            Id = new Guid("ed44eba4-9a0b-4491-a704-7581074d60b2"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(199),
                            Description = "Permissão de leitura para rotina de Negócio.",
                            Name = "AppSlider.Read.Business"
                        },
                        new
                        {
                            Id = new Guid("688cc07e-a7d7-4206-ba03-2b25c838d9c1"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(259),
                            Description = "Permissão de escrita para rotina de Negócio.",
                            Name = "AppSlider.Write.Business"
                        },
                        new
                        {
                            Id = new Guid("a9a355e6-3c7c-4e9b-b89e-c413aa915c56"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(318),
                            Description = "Permissão de leitura para rotina de Tipos de Negócio.",
                            Name = "AppSlider.Read.BusinessType"
                        },
                        new
                        {
                            Id = new Guid("1595b83b-6d3d-40b0-baa2-fb9272691d01"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(373),
                            Description = "Permissão de escrita para rotina de Tipos de Negócio.",
                            Name = "AppSlider.Write.BusinessType"
                        },
                        new
                        {
                            Id = new Guid("44740912-e8f5-4635-9f0b-c7da9489899e"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(426),
                            Description = "Permissão de leitura para rotina de Categoria.",
                            Name = "AppSlider.Read.Category"
                        },
                        new
                        {
                            Id = new Guid("b9c2f7f3-0cef-49be-a3ca-2362ef8bb54b"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(555),
                            Description = "Permissão de escrita para rotina de Categoria.",
                            Name = "AppSlider.Write.Category"
                        },
                        new
                        {
                            Id = new Guid("2037325d-c4fb-49df-99a6-9c5f9e2a86b5"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(611),
                            Description = "Permissão de leitura para rotina de Playlist.",
                            Name = "AppSlider.Read.Playlist"
                        },
                        new
                        {
                            Id = new Guid("f8c85eb3-16a2-4f35-8186-2ead738e3853"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(664),
                            Description = "Permissão de escrita para rotina de Playlist.",
                            Name = "AppSlider.Write.Playlist"
                        },
                        new
                        {
                            Id = new Guid("648fdd39-40f3-478b-a00f-20e22d0c6487"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(716),
                            Description = "Permissão de leitura para rotina de Equipamento.",
                            Name = "AppSlider.Read.Equipament"
                        },
                        new
                        {
                            Id = new Guid("a2363324-3e44-4e5d-810d-b24b71fe6c38"),
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 773, DateTimeKind.Local).AddTicks(767),
                            Description = "Permissão de escrita para rotina de Equipamento.",
                            Name = "AppSlider.Write.Equipament"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Email");

                    b.Property<string>("Franchises");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Password");

                    b.Property<string>("Profile");

                    b.Property<string>("Roles");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6520fd5-c914-4129-ae91-1eaff2db3bdd"),
                            Active = true,
                            Blocked = true,
                            DataCreated = new DateTime(2019, 8, 19, 2, 43, 16, 775, DateTimeKind.Local).AddTicks(601),
                            Email = "",
                            Name = "Administrador",
                            Password = "c342ad7be7abf5228097def554f8499d4f07191f4bcf5e80d012df86659fcea6",
                            Profile = "sa",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Business.BusinessEntity", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("IdCategory");

                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "BusinessEntityFather")
                        .WithMany("ChildrenBusinessEntity")
                        .HasForeignKey("IdFather");

                    b.HasOne("AppSlider.Domain.Entities.Files.File", "Logo")
                        .WithMany()
                        .HasForeignKey("IdLogo");

                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessType", "Type")
                        .WithMany()
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.BusinessPlayLists.BusinessPlayList", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "Business")
                        .WithMany()
                        .HasForeignKey("IdBusiness")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppSlider.Domain.Entities.PlayLists.Playlist", "PlayList")
                        .WithMany()
                        .HasForeignKey("IdPlayList")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Equipaments.Equipament", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "Establishment")
                        .WithMany()
                        .HasForeignKey("IdEstablishment");

                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "Franchise")
                        .WithMany()
                        .HasForeignKey("IdFranchise")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppSlider.Domain.Entities.PlayLists.Playlist", "PlayList")
                        .WithMany()
                        .HasForeignKey("IdPlaylist");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.PlayLists.Playlist", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "Franchise")
                        .WithMany("Playlists")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.PlayLists.PlaylistFile", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Files.File", "File")
                        .WithMany()
                        .HasForeignKey("IdFile")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppSlider.Domain.Entities.PlayLists.Playlist", "Playlist")
                        .WithMany("PlaylistFiles")
                        .HasForeignKey("IdPlayList")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
