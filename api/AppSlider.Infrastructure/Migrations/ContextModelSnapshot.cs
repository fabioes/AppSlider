// <auto-generated />
using System;
using AppSlider.Infrastructure.EntityFrameworkDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppSlider.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppSlider.Domain.Entities.Business.BusinessEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(300);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(200);

                    b.Property<string>("ContactName")
                        .HasMaxLength(200);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<Guid?>("IdCategory");

                    b.Property<Guid?>("IdFather");

                    b.Property<Guid?>("IdLogo");

                    b.Property<Guid>("IdType");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdFather");

                    b.HasIndex("IdLogo");

                    b.HasIndex("IdType");

                    b.ToTable("Business");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12b1e0d6-1d07-4677-9e92-29ece0a0e842"),
                            Active = true,
                            Blocked = true,
                            ContactAddress = "",
                            ContactEmail = "",
                            ContactName = "",
                            ContactPhone = "",
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 253, DateTimeKind.Local).AddTicks(926),
                            Description = "Franquia padrão 'MidiaFone'",
                            IdCategory = new Guid("1a707818-eb75-421a-a28a-3d2172707dcb"),
                            IdType = new Guid("eacebea6-0859-40cc-822f-a0b43cf4f09c"),
                            Name = "MidiaFone"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Business.BusinessType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("BusinessTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eacebea6-0859-40cc-822f-a0b43cf4f09c"),
                            Blocked = true,
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 307, DateTimeKind.Local).AddTicks(7481),
                            Description = "Franquia como Tipo de Negócio.",
                            Name = "Franquia"
                        },
                        new
                        {
                            Id = new Guid("00aba179-5d6d-4f7b-9df3-1dff4262594a"),
                            Blocked = true,
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 307, DateTimeKind.Local).AddTicks(7739),
                            Description = "Estabelecimento como Tipo de Negócio.",
                            Name = "Estabelecimento"
                        },
                        new
                        {
                            Id = new Guid("f729156b-cf17-4e1b-af39-e8f28ac82ad0"),
                            Blocked = true,
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 307, DateTimeKind.Local).AddTicks(7874),
                            Description = "Anunciante como Tipo de Negócio.",
                            Name = "Anunciante"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.BusinessPlayLists.BusinessPlayList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCreated");

                    b.Property<Guid>("IdBusiness");

                    b.Property<Guid>("IdPlayList");

                    b.HasKey("Id");

                    b.HasIndex("IdBusiness");

                    b.HasIndex("IdPlayList");

                    b.ToTable("BusinessPlaylists");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a707818-eb75-421a-a28a-3d2172707dcb"),
                            Blocked = true,
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 313, DateTimeKind.Local).AddTicks(6339),
                            Description = "Categoria MidiaFone.",
                            Name = "MidiaFone"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Equipaments.Equipament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<Guid?>("IdEstablishment");

                    b.Property<Guid>("IdFranchise");

                    b.Property<Guid?>("IdPlaylist");

                    b.Property<string>("MacAddress")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IdEstablishment");

                    b.HasIndex("IdFranchise");

                    b.HasIndex("IdPlaylist");

                    b.HasIndex("MacAddress");

                    b.ToTable("Equipaments");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("MineType");

                    b.Property<string>("Name");

                    b.Property<string>("Size");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.PlayLists.PlayList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Active");

                    b.Property<DateTime>("DataCreated");

                    b.Property<DateTime>("Expirate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.PlayLists.PlayListFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCreated");

                    b.Property<short>("Duration");

                    b.Property<Guid>("IdFile");

                    b.Property<Guid>("IdPlayList");

                    b.Property<int>("PlayListFileType");

                    b.HasKey("Id");

                    b.HasIndex("IdFile");

                    b.HasIndex("IdPlayList");

                    b.ToTable("PlaylistFiles");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ed1dc75-c3b5-4630-aae3-af24fb134190"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(6378),
                            Description = "Permissão de leitura para rotina de Usuário.",
                            Name = "AppSlider.Read.User"
                        },
                        new
                        {
                            Id = new Guid("ad80052b-545e-412e-9578-daf17220025f"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(6563),
                            Description = "Permissão de escrita para rotina de Usuário.",
                            Name = "AppSlider.Write.User"
                        },
                        new
                        {
                            Id = new Guid("e4544d2c-18aa-4da1-88d9-6e8de8a85cfc"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(6614),
                            Description = "Permissão de leitura para rotina de Negócio.",
                            Name = "AppSlider.Read.Business"
                        },
                        new
                        {
                            Id = new Guid("6a472771-b38a-4315-b770-9577d3b7d410"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(6657),
                            Description = "Permissão de escrita para rotina de Negócio.",
                            Name = "AppSlider.Write.Business"
                        },
                        new
                        {
                            Id = new Guid("314aeed0-bfcb-4b76-baaa-7b8970fd01e8"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(6777),
                            Description = "Permissão de leitura para rotina de Tipos de Negócio.",
                            Name = "AppSlider.Read.BusinessType"
                        },
                        new
                        {
                            Id = new Guid("85b152fe-411e-4821-8bd6-dbb3a5bd49e8"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(6820),
                            Description = "Permissão de escrita para rotina de Tipos de Negócio.",
                            Name = "AppSlider.Write.BusinessType"
                        },
                        new
                        {
                            Id = new Guid("fdd5bbbd-1d5f-46aa-93a5-8b069d5dbf17"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(6892),
                            Description = "Permissão de leitura para rotina de Categoria.",
                            Name = "AppSlider.Read.Category"
                        },
                        new
                        {
                            Id = new Guid("6b608f8d-e0f5-4d20-981d-2da0b489dab2"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(6990),
                            Description = "Permissão de escrita para rotina de Categoria.",
                            Name = "AppSlider.Write.Category"
                        },
                        new
                        {
                            Id = new Guid("6420bc94-ad83-43c6-8f84-41c08492d8c6"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(7032),
                            Description = "Permissão de leitura para rotina de Playlist.",
                            Name = "AppSlider.Read.Playlist"
                        },
                        new
                        {
                            Id = new Guid("d5b2c6e4-8f35-4a58-bd54-0c2b88fca3e3"),
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 318, DateTimeKind.Local).AddTicks(7073),
                            Description = "Permissão de escrita para rotina de Playlist.",
                            Name = "AppSlider.Write.Playlist"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCreated");

                    b.Property<string>("Email");

                    b.Property<string>("Franchises");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Password");

                    b.Property<string>("Profile");

                    b.Property<string>("Roles");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3613f5e-3b06-463a-943e-ca51b7dabbd7"),
                            Active = true,
                            Blocked = true,
                            DataCreated = new DateTime(2019, 6, 17, 1, 40, 48, 320, DateTimeKind.Local).AddTicks(8952),
                            Email = "",
                            Name = "Administrador",
                            Password = "c342ad7be7abf5228097def554f8499d4f07191f4bcf5e80d012df86659fcea6",
                            Profile = "sa",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Business.BusinessEntity", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("IdCategory");

                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "BusinessEntityFather")
                        .WithMany("ChildrenBusinessEntity")
                        .HasForeignKey("IdFather");

                    b.HasOne("AppSlider.Domain.Entities.Files.File", "Logo")
                        .WithMany()
                        .HasForeignKey("IdLogo");

                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessType", "Type")
                        .WithMany()
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.BusinessPlayLists.BusinessPlayList", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "Business")
                        .WithMany()
                        .HasForeignKey("IdBusiness")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppSlider.Domain.Entities.PlayLists.PlayList", "PlayList")
                        .WithMany()
                        .HasForeignKey("IdPlayList")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.Equipaments.Equipament", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "Establishment")
                        .WithMany()
                        .HasForeignKey("IdEstablishment");

                    b.HasOne("AppSlider.Domain.Entities.Business.BusinessEntity", "Franchise")
                        .WithMany()
                        .HasForeignKey("IdFranchise")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppSlider.Domain.Entities.PlayLists.PlayList", "PlayList")
                        .WithMany()
                        .HasForeignKey("IdPlaylist");
                });

            modelBuilder.Entity("AppSlider.Domain.Entities.PlayLists.PlayListFile", b =>
                {
                    b.HasOne("AppSlider.Domain.Entities.Files.File", "File")
                        .WithMany()
                        .HasForeignKey("IdFile")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppSlider.Domain.Entities.PlayLists.PlayList", "PlayList")
                        .WithMany("PLayListFiles")
                        .HasForeignKey("IdPlayList")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
